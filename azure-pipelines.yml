trigger:
- master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  # Disable local caching with nuget restore
  # Upon each new build a new machine is provisioned and therefore will not have the cache from before so we can disable caching. This saves around 1 minute on each build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 
  # Build configuration settings
  buildConfiguration: 'Release' # 'Release' or 'Debug'
  majorVersion: '0'
  minorVersion: '1'
  patchVersion: '1'

steps:
- task: NuGetToolInstaller@0
  displayName: 'Install NuGet tools'

- task: DotNetCoreInstaller@0
  displayName: 'Install .NET core'
  inputs:
    version: '2.2.100'

# Based on https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build?tabs=netcore2x, there is no need to run restore separately
# but do it in a separate step to keep track on the timings
- task: DotNetCoreCLI@2
  displayName: 'NuGet restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    # For some reason task doesn't support 'configuration' option directly even that is in the example but setting that doesn't do anything.
    # As a workaround pass configuration as a direct argument and control value as a variable
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/*.csproj'
    #versioningScheme : byPrereleaseNumber
    #requestedMajorVersion: '$(majorVersion)'
    #requestedMinorVersion: '$(minorVersion)'
    #requestedPatchVersion: '$(patchVersion)'

- task: VSTest@2
  displayName: 'Run unit tests'
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# The build phase should build the nuget file, so I assume that that step can be skipped
- task: DotNetCoreCLI@2
  displayName: 'NuGet pack'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    nobuild: true
    # The projects are already built in the previous step, so skip build here
    #arguments: '--no-build'
    configurationToPack: '$(buildConfiguration)'
    versioningScheme : byPrereleaseNumber
    requestedMajorVersion: '$(majorVersion)'
    requestedMinorVersion: '$(minorVersion)'
    requestedPatchVersion: '$(patchVersion)'


- task: DotNetCoreCLI@2
  displayName: 'NuGet push'
  inputs:
    command: 'push'
    packagesToPush: '**/*.nupkg;' 
    publishVstsFeed: '7c355e95-b690-496c-a239-4feb7350bbdd'
    #packagesToPush: '$(build.artifactStagingDirectory)/**/*.nupkg' # Required when command == push
    #nuGetFeedType: 'internal' # Required when command == push. Options: internal, external
    #publishVstsFeed: # Required when command == push && NuGetFeedType == internal
    #publishFeedCredentials: # Required when command == push && NuGetFeedType == external

