trigger:
- master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  # Upon each new build a new machine is provisioned and therefore will not have the cache from before so we can disable caching
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 
  # Build configuration settings
  buildConfiguration: 'Release'
  majorVersion: '0'
  minorVersion: '1'
  patchVersion: '1'


steps:
- task: NuGetToolInstaller@0
  displayName: 'Install nuget tools'

- task: DotNetCoreInstaller@0
  displayName: 'Install .NET core'
  inputs:
    version: '2.2.100'

- task: DotNetCoreCLI@2
  displayName: 'Nuget restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/*.csproj'
    versioningScheme : byPrereleaseNumber
    requestedMajorVersion: '$(majorVersion)'
    requestedMinorVersion: '$(minorVersion)'
    requestedPatchVersion: '$(patchVersion)'

- task: VSTest@2
  displayName: 'Run unit tests'
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# The build phase should build the nuget file, so I assume that that step can be skipped
#- task: DotNetCoreCLI@2
#  displayName: 'Nuget pack'
#  inputs:
#    command: 'pack'
#    configuration: '$(buildConfiguration)'


- task: DotNetCoreCLI@2
  displayName: 'Nuget push'
  inputs:
    command: 'push'
    packagesToPush: '**/*.nupkg;' 
    publishVstsFeed: '7c355e95-b690-496c-a239-4feb7350bbdd'
    #packagesToPush: '$(build.artifactStagingDirectory)/**/*.nupkg' # Required when command == push
    #nuGetFeedType: 'internal' # Required when command == push. Options: internal, external
    #publishVstsFeed: # Required when command == push && NuGetFeedType == internal
    #publishFeedCredentials: # Required when command == push && NuGetFeedType == external

